/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "test_types.h"

#include <algorithm>

namespace com { namespace test {

const char* Param1::ascii_fingerprint = "4BA682F31C2EDBE3D62A1FE28CC2DD0D";
const uint8_t Param1::binary_fingerprint[16] = {0x4B,0xA6,0x82,0xF3,0x1C,0x2E,0xDB,0xE3,0xD6,0x2A,0x1F,0xE2,0x8C,0xC2,0xDD,0x0D};

uint32_t Param1::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_userId = false;
  bool isset_userNum = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userId);
          isset_userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userType);
          this->__isset.userType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userNum);
          isset_userNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_userId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_userNum)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Param1::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Param1");

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->userId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.userType) {
    xfer += oprot->writeFieldBegin("userType", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->userType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("userNum", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->userNum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Param1 &a, Param1 &b) {
  using ::std::swap;
  swap(a.userId, b.userId);
  swap(a.userType, b.userType);
  swap(a.userNum, b.userNum);
  swap(a.__isset, b.__isset);
}

}} // namespace
