/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef test_TYPES_H
#define test_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace com { namespace test {

typedef struct _Param1__isset {
  _Param1__isset() : userType(false) {}
  bool userType;
} _Param1__isset;

class Param1 {
 public:

  static const char* ascii_fingerprint; // = "4BA682F31C2EDBE3D62A1FE28CC2DD0D";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0xA6,0x82,0xF3,0x1C,0x2E,0xDB,0xE3,0xD6,0x2A,0x1F,0xE2,0x8C,0xC2,0xDD,0x0D};

  Param1() : userId(0), userType(0), userNum(3) {
  }

  virtual ~Param1() throw() {}

  int32_t userId;
  int32_t userType;
  int32_t userNum;

  _Param1__isset __isset;

  void __set_userId(const int32_t val) {
    userId = val;
  }

  void __set_userType(const int32_t val) {
    userType = val;
    __isset.userType = true;
  }

  void __set_userNum(const int32_t val) {
    userNum = val;
  }

  bool operator == (const Param1 & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (__isset.userType != rhs.__isset.userType)
      return false;
    else if (__isset.userType && !(userType == rhs.userType))
      return false;
    if (!(userNum == rhs.userNum))
      return false;
    return true;
  }
  bool operator != (const Param1 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Param1 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Param1 &a, Param1 &b);

}} // namespace

#endif
