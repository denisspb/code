/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Calculator_H
#define Calculator_H

#include <thrift/TDispatchProcessor.h>
#include "test_types.h"

namespace com { namespace test {

class CalculatorIf {
 public:
  virtual ~CalculatorIf() {}
  virtual int32_t addF(const int32_t num1, const int32_t num2, const int32_t num3) = 0;
  virtual int32_t delF(const int32_t num1, const int32_t num2, const int32_t num3) = 0;
};

class CalculatorIfFactory {
 public:
  typedef CalculatorIf Handler;

  virtual ~CalculatorIfFactory() {}

  virtual CalculatorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CalculatorIf* /* handler */) = 0;
};

class CalculatorIfSingletonFactory : virtual public CalculatorIfFactory {
 public:
  CalculatorIfSingletonFactory(const boost::shared_ptr<CalculatorIf>& iface) : iface_(iface) {}
  virtual ~CalculatorIfSingletonFactory() {}

  virtual CalculatorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CalculatorIf* /* handler */) {}

 protected:
  boost::shared_ptr<CalculatorIf> iface_;
};

class CalculatorNull : virtual public CalculatorIf {
 public:
  virtual ~CalculatorNull() {}
  int32_t addF(const int32_t /* num1 */, const int32_t /* num2 */, const int32_t /* num3 */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t delF(const int32_t /* num1 */, const int32_t /* num2 */, const int32_t /* num3 */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _Calculator_addF_args__isset {
  _Calculator_addF_args__isset() : num1(false), num2(false), num3(false) {}
  bool num1;
  bool num2;
  bool num3;
} _Calculator_addF_args__isset;

class Calculator_addF_args {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  Calculator_addF_args() : num1(0), num2(0), num3(0) {
  }

  virtual ~Calculator_addF_args() throw() {}

  int32_t num1;
  int32_t num2;
  int32_t num3;

  _Calculator_addF_args__isset __isset;

  void __set_num1(const int32_t val) {
    num1 = val;
  }

  void __set_num2(const int32_t val) {
    num2 = val;
  }

  void __set_num3(const int32_t val) {
    num3 = val;
  }

  bool operator == (const Calculator_addF_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    if (!(num3 == rhs.num3))
      return false;
    return true;
  }
  bool operator != (const Calculator_addF_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_addF_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_addF_pargs {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};


  virtual ~Calculator_addF_pargs() throw() {}

  const int32_t* num1;
  const int32_t* num2;
  const int32_t* num3;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_addF_result__isset {
  _Calculator_addF_result__isset() : success(false) {}
  bool success;
} _Calculator_addF_result__isset;

class Calculator_addF_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  Calculator_addF_result() : success(0) {
  }

  virtual ~Calculator_addF_result() throw() {}

  int32_t success;

  _Calculator_addF_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Calculator_addF_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculator_addF_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_addF_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_addF_presult__isset {
  _Calculator_addF_presult__isset() : success(false) {}
  bool success;
} _Calculator_addF_presult__isset;

class Calculator_addF_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~Calculator_addF_presult() throw() {}

  int32_t* success;

  _Calculator_addF_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculator_delF_args__isset {
  _Calculator_delF_args__isset() : num1(false), num2(false), num3(false) {}
  bool num1;
  bool num2;
  bool num3;
} _Calculator_delF_args__isset;

class Calculator_delF_args {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  Calculator_delF_args() : num1(0), num2(0), num3(0) {
  }

  virtual ~Calculator_delF_args() throw() {}

  int32_t num1;
  int32_t num2;
  int32_t num3;

  _Calculator_delF_args__isset __isset;

  void __set_num1(const int32_t val) {
    num1 = val;
  }

  void __set_num2(const int32_t val) {
    num2 = val;
  }

  void __set_num3(const int32_t val) {
    num3 = val;
  }

  bool operator == (const Calculator_delF_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    if (!(num3 == rhs.num3))
      return false;
    return true;
  }
  bool operator != (const Calculator_delF_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_delF_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_delF_pargs {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};


  virtual ~Calculator_delF_pargs() throw() {}

  const int32_t* num1;
  const int32_t* num2;
  const int32_t* num3;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_delF_result__isset {
  _Calculator_delF_result__isset() : success(false) {}
  bool success;
} _Calculator_delF_result__isset;

class Calculator_delF_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  Calculator_delF_result() : success(0) {
  }

  virtual ~Calculator_delF_result() throw() {}

  int32_t success;

  _Calculator_delF_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Calculator_delF_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculator_delF_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_delF_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_delF_presult__isset {
  _Calculator_delF_presult__isset() : success(false) {}
  bool success;
} _Calculator_delF_presult__isset;

class Calculator_delF_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~Calculator_delF_presult() throw() {}

  int32_t* success;

  _Calculator_delF_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CalculatorClient : virtual public CalculatorIf {
 public:
  CalculatorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CalculatorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t addF(const int32_t num1, const int32_t num2, const int32_t num3);
  void send_addF(const int32_t num1, const int32_t num2, const int32_t num3);
  int32_t recv_addF();
  int32_t delF(const int32_t num1, const int32_t num2, const int32_t num3);
  void send_delF(const int32_t num1, const int32_t num2, const int32_t num3);
  int32_t recv_delF();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CalculatorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CalculatorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CalculatorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_addF(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delF(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CalculatorProcessor(boost::shared_ptr<CalculatorIf> iface) :
    iface_(iface) {
    processMap_["addF"] = &CalculatorProcessor::process_addF;
    processMap_["delF"] = &CalculatorProcessor::process_delF;
  }

  virtual ~CalculatorProcessor() {}
};

class CalculatorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CalculatorProcessorFactory(const ::boost::shared_ptr< CalculatorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CalculatorIfFactory > handlerFactory_;
};

class CalculatorMultiface : virtual public CalculatorIf {
 public:
  CalculatorMultiface(std::vector<boost::shared_ptr<CalculatorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CalculatorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CalculatorIf> > ifaces_;
  CalculatorMultiface() {}
  void add(boost::shared_ptr<CalculatorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t addF(const int32_t num1, const int32_t num2, const int32_t num3) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addF(num1, num2, num3);
    }
    return ifaces_[i]->addF(num1, num2, num3);
  }

  int32_t delF(const int32_t num1, const int32_t num2, const int32_t num3) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delF(num1, num2, num3);
    }
    return ifaces_[i]->delF(num1, num2, num3);
  }

};

}} // namespace

#endif
